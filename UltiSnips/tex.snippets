global !p
#texMathZones diventa:
#texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
Mathexp=['0','1','2','3','4','5','6','7','8','9',',','.','?','-','','\\','\}','^','_',"'"]
greek = (['æ','”','ŋ','Ŋ','ø','Ø','ł','Ł','€','¢','ð','Ð','þ','ß','ŧ'])
greekexpand = ['alpha','beta','gamma','Gamma','omega','Omega','lambda','Lambda','epsilon','mathcal{E}','delta','Delta','varphi','sigma','theta']
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def create_matrix(snip):
        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()
        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])
        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
        rows = int_val(rows)
        cols = int_val(cols)
        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
        snip.buffer[snip.line] = ''
        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
                final_str += " \\\\\\\n"
        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"
        snip.expand_anon(final_str)

endglobal


snippet newdoc "Basic template" bA
\documentclass[11pt]{article}

\usepackage{sectsty}
\usepackage{graphicx}

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

\title{ Title}
\author{ Author }
\date{\today}

\begin{document}
\maketitle	
\pagebreak

% Optional TOC
% \tableofcontents
% \pagebreak

%--Paper--

\section{Section 1}
Lorem Ipsum \\

%--/Paper--

\end{document}
endsnippet

snippet beg "begin{} / end{}" b
\\begin{$1}
	$0
	puppa
\\end{$1}
endsnippet

snippet thm "theorem" bA
\\begin{thm}[$1]
	$0
\\end{thm}
\\noindent
endsnippet

snippet exmp "example" bA
\\begin{exmp}[$1]
	$0
\\end{exmp}
\\noindent
endsnippet

snippet ex "example" b
\\begin{ex}[$1]
	$0
\\end{ex}
\\noindent
endsnippet

snippet def "definition" bA
\\begin{defn}[$1]
	$0
\\end{defn}
\\noindent
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet sec "section" b
\section{${1:Sub.name}}%
\label{sub:$1}
$0
endsnippet

snippet sub "subsection" b
\subsection{${1:Sub.name}}%
\label{sub:$1}
$0
endsnippet

snippet ssub "subsubsection" b
\subsubsection{${1:Sub.name}}%
\label{subsub:$1}
$0
endsnippet

snippet par "paragraph" b
\paragraph{${1:Par.name}}%
\label{par:$1}
$0
endsnippet

snippet frame "beamer frame" b
\\begin{frame}
\\frametitle{${1:Title}}
\\framesubtitle{${2:Subtitle}}
$0
\\end{frame}
endsnippet

snippet cols "beamer two columns" b
\\begin{columns}
\\begin{column}{0.5\textwidth}
$1
\\end{column}
\\begin{column}{0.5\textwidth}
$0
\\end{column}
\\end{columns}
endsnippet

snippet block "beamer block" A
\\begin{block}{${1:Title}}
$0
\\end{block}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" A
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies`!p
if t[1] and t[1][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$1
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math env" wA
$${1}$ $0
endsnippet

snippet dm "Math un numbered" wA
\[
	${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Aligned" bA
\[\begin{aligned}
	${1:${VISUAL}}
.\end{aligned}\]
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([\}])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([\}])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

#snippet pmat "pmat" iA
#\begin{pmatrix} $1 \end{pmatrix} $0
#endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet () "()" iA
(${1:${VISUAL}}) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left(${1:${VISUAL}}\right)$0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left(${1:${VISUAL}}\right)$0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left|${1:${VISUAL}}\right|$0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{${1:${VISUAL}}\right\\}$0
endsnippet

context "math()"
snippet lrb "left\{ right\}" iA
\left\\{${1:${VISUAL}}\right\\}$0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[${1:${VISUAL}}\right]$0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}}\right>$0
endsnippet

context "math()"
snippet lrin "leftin rightin" iA
\left.${1:${VISUAL}}\right|_{$2}$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{${1:n}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "partial d/dx" i
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet ddt "d/dx" iA
\frac{\text{d} ${1:V}}{\text{d} ${2:t}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet -- "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
			xlabel={$6},
			ylabel={$7},
			xtick={0},
			ytick={0},
			xticklabel={$$},
			yticklabel={$$},
		]
			\addplot[domain=$2+9/10*$2:$3+9/10*$3, samples=${8:100}]{$9};
		\end{axis}
	\end{tikzpicture}
	\caption{$10}
	\label{$10}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

#priority 100
context "math()"
snippet '(?<!\\)(tau|phi|nu|mu|rho|chi|psi|eta)' "ln" rwA
\\`!p snip.rv = match.group(1)``!p
if t[1] and t[1][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$1
endsnippet

context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)``!p
if t[1] and t[1][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$1
endsnippet

priority 300
context "math()"
snippet dint "integral with up and down" w
\\int_\{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet int "integral" w
\\int
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(tan|arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)``!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

snippet >> ">>" iA
\gg 
endsnippet

snippet << "<<" iA
\ll 
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} $1 \\\\ $2 \end{pmatrix}
endsnippet

snippet vv "inline vector" i
$\v{$1}$$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

priority 10
context "math()"
snippet til "hat" i
\tilde{$1}$0
endsnippet

context "math()"
snippet vv "boldsymbol" iA
\v{$1}$0
endsnippet

context "math()"
snippet à "boldsymbol" iA
\boldsymbol{$1}$0
endsnippet

context "math()"
snippet '([æ”ŋŊøØłŁ€¢ðÐþßŧ])' "greek letter" irA
\\`!p
for i in range(len(greek)):
	if greek[i] == match.group(1):
			snip.rv = greekexpand[i]
``!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet ħ "hbar" iA
\hbar 
endsnippet

context "math()"
snippet bra "bra" w
\bra{$1}$0
endsnippet

context "math()"
snippet ket "ket" i
\ket{$1}$0
endsnippet

context "math()"
snippet bracket "braket" i
\bracket{$1}{$2}$0
endsnippet

snippet defn "definition enviroenment" bA
\begin{defn}[${1:Name}]{defn:$1}
$2
\end{defn}
$0
endsnippet

snippet quest "domanda enviroenment" bA
\begin{quest}[${1:Name}]{quest:$1}
$2
\end{quest}
$0
endsnippet


snippet fact "fact enviroenment" bA
\begin{fact}[${1:Name}]{fact:$1}
$2
\end{fact}
$0
endsnippet

snippet foo "fact enviroenment" iA

\footnote{${1:${VISUAL}}}
$0
endsnippet

context "math()"
snippet || "parallel" iA
\parallel`!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet ;; "approx" iA
\approx`!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

snippet atm "atomo" i
${}^{${1:12}}$${2:C}
endsnippet

context "math()"
snippet atm "atomo" i
{}^{${1:12}}\text{${2:C}}
endsnippet

context "math()"
snippet prp "proportional" iA
\propto`!p
#snip.rv = 'ciao'
if t[1] and t[1][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$1
endsnippet

context "math()"
snippet up "go up" iA
\nearrow`!p
#snip.rv = 'ciao'
if t[1] and t[1][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$1
endsnippet

context "math()"
snippet down "go down" iA
\swarrow`!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet


snippet dcases "dcases equations" iA
\\[
\\begin{dcases}
$0
\\end{dcases}
\\]
endsnippet

context "math()"
snippet .d "dottet" iA
\\dot{$1}$0
endsnippet 

context "math()"
snippet ..d "dottet" iA
\\ddot{$1}$0
endsnippet 

snippet frame "beamer frame" bA
\\begin{frame}
\\frametitle{${1:title}}
\\framesubtitle{${2:subtitle}}
$0
\\end{frame}
endsnippet

snippet block "beamer block" bA
\\begin{block}{${1:title}}
$0
\\end{block}
endsnippet

context "math()"
snippet '(RR|NN|II|ZZ|QQ)' "Insiemi" rA
\\mathbb{`!p snip.rv = match.group(1)[0]`}$0
endsnippet


pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)? (\d+) x (\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" rA
endsnippet

context "math()"
snippet q "quad" w
\\quad`!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet qq "quad" w
\\qquad`!p
#snip.rv = 'ciao'
if t[0] and t[0][0] not in Mathexp:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

snippet side "sidenote" i
\\sidenote{\\scriptsize $1}$0
endsnippet

snippet marink "inkscape figure on the side" b
\\marginpar{
        \\captionsetup{type=figure}
        \\incfig{$1}
        \\caption{\\scriptsize $2}
	\\label{fig:$1}
    }
$0
endsnippet 

snippet marfig "figure on the side" bA
\marginpar{
        \\captionsetup{type=figure}
            \\includegraphics{$1}
        \\caption{\scriptsize $2}
	\\label{fig:$1}
    }
$0
endsnippet 

# vim:ft=snippets
